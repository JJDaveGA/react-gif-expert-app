{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputVale","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","gif","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","img","GifExpertApp","setCategories","ReactDOM","render","document","getElementById"],"mappings":"mMAkCeA,EA/BK,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAEpB,EAAmCC,mBAAS,IAA5C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAY,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC1CN,EAAa,MAKf,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAjBoB,SAACP,GACzBF,EAAaE,EAAEQ,OAAOF,a,+BCRbG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UAAUH,GAD3C,+DAEEI,MAAMF,GAFR,cAEfG,EAFe,gBAGEA,EAASC,OAHX,uBAGbC,EAHa,EAGbA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARjB,kBAWdM,GAXc,4CAAH,sDCWLO,EATK,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAC3B,OACE,sBAAKc,UAAU,2CAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCoBKO,EAtBC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAEhB,ECH0B,SAACA,GAC3B,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAAAX,GACrBS,EAAS,CACPf,KAAMM,EACNO,SAAS,SAGZ,CAACpB,IAEGqB,EDZwBI,CAAazB,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAEpB,OACE,qCACE,6BAAKpB,IACL,sBAAKgB,UAAU,YAAf,UACGI,GAAW,4CAEVP,EAAOJ,KAAI,SAAAiB,GAAG,OACZ,cAAC,EAAD,eAEMA,GADCA,EAAIf,cEWRgB,EAvBM,WAEnB,MAAoCzC,mBAAS,CAAC,kBAA9C,mBAAOQ,EAAP,KAAmBkC,EAAnB,KAEA,OACE,qCACE,8CACA,cAAC,EAAD,CAAa3C,YAAa2C,IAC1B,uBACA,6BAEIlC,EAAWe,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEEA,SAAUA,GADLA,Y,YCXnB6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.659cf563.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategory}) => {\r\n  \r\n  const [inputValue, setInputVale] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputVale(e.target.value);\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategory(categories => [inputValue, ...categories]);\r\n      setInputVale('');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange= {handleInputChange}\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategory: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;\r\n\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=30&api_key=knG5R6NC0HmytqcOUpC1qvxwe44cWwem`;\r\n  const response = await fetch(url);\r\n  const { data } = await response.json();\r\n  const gifs = data.map(gif => {\r\n    return {\r\n      id: gif.id,\r\n      title: gif.title,\r\n      url: gif.images?.downsized_medium.url\r\n    }\r\n  });\r\n  return gifs;\r\n}","import React from 'react';\r\n\r\nconst GifGridItem = ({title, url}) => { \r\n  return (\r\n    <div className=\"card animate__animated animate__fadeInUp\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GifGridItem;","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n  const {data:images, loading} = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      <div className=\"card-grid\">\r\n        {loading && <p>Cargando...</p>}\r\n        {\r\n          images.map(img => (\r\n            <GifGridItem\r\n              key={img.id}\r\n              {...img} \r\n            />\r\n          ))\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GifGrid;\r\n","import {useState, useEffect} from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n  \r\n  useEffect(() => {\r\n    getGifs(category).then(images => {\r\n      setState({\r\n        data: images,\r\n        loading: false}\r\n      );\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n}","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n  const [categories, setCategories] = useState(['Banjo-Kazooie']);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategory={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {\r\n          categories.map(category => (\r\n            <GifGrid \r\n              key={category}\r\n              category={category} \r\n            />\r\n          ))\r\n        }\r\n      </ol>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp'\nimport './index.css';\nimport 'animate.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}